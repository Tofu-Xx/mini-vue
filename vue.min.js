function e(e) {
    let t;
    const c = {};
    const o = e.el?.at ? document.querySelector(e.el) : e.el ?? document;
    const n = Object.assign(new Proxy(typeof e.data == 'object' ? e.data : e.data?.() ?? {}, {
        get: (...e)=>[
                Reflect.get(...e),
                (c[e[1]] ??= new Set()).add(t)
            ][0],
        set: (...e)=>[
                Reflect.set(...e),
                c[e[1]]?.forEach((e)=>e())
            ][0]
    }), e.methods, {
        $el: o,
        $refs: {}
    });
    const a = (t, c)=>{
        const o = t.currentNode;
        const { nodeType: r, data: s } = o;
        if (r == 1) for (const { name: e, value: t } of o.attributes){
            e == 'ref' && (n.$refs[t] = o);
            e[0] == '@' && (o[e.replace('@', 'on')] = n[t].bind(n));
            if (e[0] == ':') {
                const n = e.slice(1);
                c(()=>o.setAttribute(n, o[n] = new Function(t)));
            }
        }
        if (r == 3) {
            const e = Array(...s.matchAll(/\{\{(.*?)\}\}/g));
            e[0] && c(()=>o.data = e.reduce((e, t)=>e.replace(t[0], n[t[1].trim()]), s));
        }
        t.nextNode() ? a(t, c) : e.mounted?.call(n);
    };
    a(document.createTreeWalker(o, 7), (e)=>(t = e, e()));
    for (const [t, o] of Object.entries(e.watch ?? {})){
        let e = n[t];
        c[t].add(()=>Promise.resolve().then(()=>{
                const c = n[t];
                o.call(n, c, e);
                e = c;
            }));
    }
}
;

