function Vue(e={}){let t,r={},a=document.querySelector(e.el)??document,c=Object.assign(new Proxy({$el:a,$refs:{}},{get:(...e)=>[Reflect.get(...e),(r[e[1]]??=new Set).add(t)][0],set:(...e)=>[Reflect.set(...e),queueMicrotask(()=>{r[e[1]]?.forEach(e=>e?.())})][0]}),e.methods,e.data),l=JSON.stringify(c),n=RegExp(Object.keys(c).map(e=>`(?<![\\w$])${e}(?![\\w$])`).join("|").replace(/\$/g,"\\$"),"g"),i=(e,t="return ")=>Function("$event",t+e.replace(n,e=>"this."+e).trim()).bind(c),s=e=>(t=e,e()),u=(e,t=document.createTreeWalker(e,7))=>{let{nodeType:r,data:a}=e;if(1==r)for(let{name:t,value:r}of e.attributes){let a=t.slice(1);"@"==t[0]&&e.addEventListener(a,/[^\s\w$]/.test(r)?i(r,""):c[r.trim()]?.bind(c)),":"==t[0]&&s(()=>e.setAttribute(a,e[a]=i(r)())),"ref"==t&&(c.$refs[r]=e)}3==r&&s(()=>e.data=a.replace(/\{\{(.*?)\}\}/gs,(e,t)=>i(t)())),t.nextNode()&&u(t.currentNode,t)};for(let[t,a]of Object.entries(e.watch??{})){let e=c[t];r[t].add(()=>{let r=c[t];r!=e&&(a.call(c,r,e),e=r)})}e.created?.call(c),u(a),queueMicrotask(()=>{t=()=>{l!=(l=JSON.stringify(c))&&queueMicrotask(()=>{e.updated?.call(c),setTimeout(()=>{l=null})})}}),e.mounted?.call(c)}
