function Vue(e={}){let t,r={},l=e.el?.at?document.querySelector(e.el):e.el??document,a=Object.assign(new Proxy(e.data,{get:(...e)=>[Reflect.get(...e),(r[e[1]]??=new Set).add(t)][0],set:(...e)=>[Reflect.set(...e),r[e[1]]?.forEach(e=>e?.())][0]}),e.methods,{$el:l,$refs:{}}),c=RegExp(Object.keys(a).map(e=>`(?<![\\w$])${e}(?![\\w$])`).join("|").replace(/\$/g,"\\$"),"g"),n=(e,t="return ")=>Function("$event",t+e.trim().replace(c,e=>"this."+e)).bind(a),o=e=>(t=e,e()),d=(e,t=document.createTreeWalker(e,7))=>{let{nodeType:r,data:l}=e;if(1==r)for(let{name:t,value:r}of e.attributes){let l=t.slice(1);"@"==t[0]&&(e["on"+l]=/[^\s\w$]/.test(r)?n(r,""):a[r.trim()]?.bind(a)),":"==t[0]&&o(()=>e.setAttribute(l,e[l]=n(r)())),"ref"==t&&(a.$refs[r]=e)}3==r&&o(()=>e.data=l.replace(/\{\{(.*?)\}\}/gs,(e,t)=>n(t)())),t.nextNode()&&d(t.currentNode,t)};for(let[t,l]of Object.entries(e.watch??{})){let e=a[t];r[t].add(()=>Promise.resolve().then(()=>{let r=a[t];l.call(a,r,e),e=r}))}e.created?.call(a),d(l),t=()=>Promise.resolve().then(e.updated?.bind(a)),e.mounted?.call(a)}
