function Vue(e={}){let t,a=!1,r={},c=document.querySelector(e.el)??document,l=Object.assign(new Proxy(e.data,{get:(...e)=>[Reflect.get(...e),(r[e[1]]??=new Set).add(t)][0],set:(...e)=>[Reflect.set(...e),queueMicrotask(()=>r[e[1]]?.forEach(e=>e?.()))][0]}),e.methods,{$el:c,$refs:{}}),o=RegExp(Object.keys(l).map(e=>`(?<![\\w$])${e}(?![\\w$])`).join("|").replace(/\$/g,"\\$"),"g"),n=(e,t="return ")=>Function("$event",t+e.trim().replace(o,e=>"this."+e)).bind(l),d=e=>(t=e,e()),s=(e,t=document.createTreeWalker(e,7))=>{let{nodeType:a,data:r}=e;if(1==a)for(let{name:t,value:a}of e.attributes){let r=t.slice(1);"@"==t[0]&&(e["on"+r]=/[^\s\w$]/.test(a)?n(a,""):l[a.trim()]?.bind(l)),":"==t[0]&&d(()=>e.setAttribute(r,e[r]=n(a)())),"ref"==t&&(l.$refs[a]=e)}3==a&&d(()=>e.data=r.replace(/\{\{(.*?)\}\}/gs,(e,t)=>n(t)())),t.nextNode()&&s(t.currentNode,t)};for(let[t,a]of Object.entries(e.watch??{})){let e=l[t];r[t].add(()=>queueMicrotask(()=>{let r=l[t];r!=e&&(a.call(l,r,e),e=r)}))}e.created?.call(l),s(c),t=()=>{a||(a=!0,setTimeout(()=>{a=!1,e.updated?.call(l)}))},e.mounted?.call(l)}
