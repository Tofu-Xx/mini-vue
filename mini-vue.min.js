  function Vue(e){let t,a={},r=e.el?.at?document.querySelector(e.el):e.el??document,l=Object.assign(new Proxy("object"==typeof e.data?e.data:e.data?.()??{},{get:(...e)=>[Reflect.get(...e),(a[e[1]]??=new Set).add(t)][0],set:(...e)=>[Reflect.set(...e),a[e[1]]?.forEach(e=>e())][0]}),e.methods,{$el:r,$refs:{}}),n=(t,a)=>{let r=t.currentNode;if(1==r.nodeType)for(let e of r.attributes){"ref"==e.name&&(l.$refs[e.value]=r);"@"==e.name[0]&&(r[e.name.replace("@","on")]=l[e.value].bind(l));if(":"==e.name[0]){let t=e.name.slice(1);a(()=>r.setAttribute(t,r[t]=l[e.value]))}}if(3==r.nodeType){let e=r.data,t=Array(...e.matchAll(/\{\{(.*?)\}\}/g));t[0]&&a(()=>r.data=t.reduce((e,t)=>e.replace(t[0],l[t[1].trim()]),e))}t.nextNode()?n(t,a):e.mounted?.bind(l)()};n(document.createTreeWalker(r,7),e=>(t=e,e()));for(let[t,r]of Object.entries(e.watch??{})){let e=l[t];a[t].add(()=>Promise.resolve().then(()=>{let a=l[t];r.bind(l)(a,e);e=a}))}}
