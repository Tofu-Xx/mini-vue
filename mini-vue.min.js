function Vue(e) {
  let t, a = {}, r = e.el?.at ? document.querySelector(e.el) : e.el ?? document;
  if (!r) return;
  let n = Object.assign(new Proxy("object" == typeof e.data ? e.data : e.data?.() ?? {}, { get: (...e) => [Reflect.get(...e), (a[e[1]] ??= new Set).add(t)][0], set: (...e) => [Reflect.set(...e), a[e[1]]?.forEach(e => e())][0] }), e.methods, { $el: r, $refs: {} }), d = (t, a, r) => {
    if (1 == t.nodeType) for (let e of t.attributes) {
      "ref" == e.name && (n.$refs[e.value] = t);
      "@" == e.name[0] && t.addEventListener(e.name.slice(1), n[e.value].bind(n));
      if (":" == e.name[0]) {
        let a = e.name.slice(1);
        r(() => t.setAttribute(a, t[a] = n[e.value]));
      }
    } if (3 == t.nodeType) {
      let e = t.data, a = Array(...e.matchAll(/\{\{(.*?)\}\}/g));
      a[0] && r(() => t.data = a.reduce((e, t) => e.replace(t[0], n[t[1].trim()]), e));
    } a.nextNode() ? d(a.currentNode, a, r) : e.mounted?.bind(n)();
  };
  d(r, document.createTreeWalker(r, 7), e => (t = e, e()));
  for (let [t, r] of Object.entries(e.watch ?? {})) {
    let e = n[t];
    a[t].add(() => Promise.resolve().then(() => {
      let a = n[t];
      r.bind(n)(a, e);
      e = a;
    }));
  }
}
